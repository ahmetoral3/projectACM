#include <WiFi.h>
#define normaal 1
#define wifi 0

// Replace with your network credentials
const char* ssid = "Tesla ioT";
const char* password = "fsL6HgjN";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

int staat = wifi;
int reed_switch = 21;
int reed1 = 18;
int reed2 = 19;
int reed3 = 13;
int reed_status;

const int trigPin = 22;
const int echoPin = 23;

const int trigPinRechts = 16;
const int echoPinRechts = 17;

const int trigPinBeneden = 14;
const int echoPinbeneden = 12;

#define sound speed in cm/uS
#define SOUND_SPEED 0.034

long duration;
long duration1;
long duration2;
float distanceCm;
float distanceCm1;
float distanceCm2;

int irLinks = 15;
int irRechts = 4 ;


const int motorpinLeft1 =25;
const int motorpinLeft2 =26;
const int motorpinRight1 =32;
const int motorpinRight2 =33;
const int ledVerbinding = 2;
const int switchButton = 5;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  Serial.begin(9600);
  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
  pinMode(motorpinLeft1,OUTPUT);// Sets the motorpinleft1 as an output
  pinMode(motorpinLeft2,OUTPUT);// Sets the motorpinleft2 as an output
  pinMode(motorpinRight1,OUTPUT);// Sets the motorpinright1 as an output
  pinMode(motorpinRight2,OUTPUT);// Sets the motorpinright2 as an output
  pinMode(ledVerbinding, OUTPUT);// Sets led pin as an output
  pinMode(switchButton, INPUT);// Sets the switch button as an output
  //reed
    pinMode(reed_switch, INPUT);
    //ultrasoon
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input
    pinMode(trigPinRechts, OUTPUT);// Sets the trigPinRechts as an Output
    pinMode(echoPinRechts,INPUT);// Sets the echoPinbeneden as an Input
    pinMode(trigPinBeneden,OUTPUT);// Sets the trigPinBeneden as an Output
    pinMode(echoPinbeneden,INPUT);// Sets the echoPinbeneden as an Input
    
    
    //ir-sensor
    pinMode(irLinks,INPUT);// Sets the irlinks pin as an input
    pinMode(irRechts,INPUT);// sets the irRechts pin as an input
    WiFi.begin(ssid, password);
}

// motor code
  void vooruit(){
    digitalWrite(motorpinLeft1,HIGH);
    digitalWrite(motorpinLeft2,LOW);
    digitalWrite(motorpinRight1,LOW);
    digitalWrite(motorpinRight2,HIGH);
  }
  //motor code
  void achteruit(){
    digitalWrite(motorpinLeft1,LOW);
    digitalWrite(motorpinLeft2,HIGH);
    digitalWrite(motorpinRight1,HIGH);
    digitalWrite(motorpinRight2,LOW);
  }
  //motor code
  void links(){
    digitalWrite(motorpinLeft1,LOW);
    digitalWrite(motorpinLeft2,HIGH);
    digitalWrite(motorpinRight1,LOW);
    digitalWrite(motorpinRight2,HIGH);
  }
  // motor code
  void rechts(){
    digitalWrite(motorpinLeft1,HIGH);
    digitalWrite(motorpinLeft2,LOW);
    digitalWrite(motorpinRight1,HIGH);
    digitalWrite(motorpinRight2,LOW);
  }
  //motor
  void stationair(){
    digitalWrite(motorpinLeft1,LOW);
    digitalWrite(motorpinLeft2,LOW);
    digitalWrite(motorpinRight1,LOW);
    digitalWrite(motorpinRight2,LOW);
  }

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
             if (header.indexOf("GET /30/wifi") >= 0) {
              staat = wifi;
            } else if (header.indexOf("GET /30/normaal") >= 0) {
              staat = normaal;
            }

            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1>ACM team 27</h1>");
            
            // button for "voor" 
            client.println("<p><a href=\"/26/voor\"><button class=\"button\">vooruit</button></a></p>");

            // button for "achter" 
            client.println("<p><a href=\"/27/achter\"><button class=\"button\">achteruitr</button></a></p>");

            // button for "links"
            client.println("<p><a href=\"/28/links\"><button class=\"button\">links</button></a></p>");

            // button for "rechts" 
            client.println("<p><a href=\"/29/rechts\"><button class=\"button\">rechts</button></a></p>");  
            if (staat = normaal) {
              client.println("<p><a href=\"/30/wifi\"><button class=\"button\">normaal</button></a></p>");
            } else {
              client.println("<p><a href=\"/30/normaal\"><button class=\"button button2\">wifi</button></a></p>");
            }  
            
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");

    switch(staat){
      case normaal:
         //reads the status
    reed_status = digitalRead(reed_switch);
    reed_status = digitalRead(reed1);
    reed_status = digitalRead(reed2);
    reed_status = digitalRead(reed3);
    if (reed_status == 1){
    Serial.println("0");
    }else{
    Serial.println("1");
    }

    // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  digitalWrite(trigPinRechts, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinRechts, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinRechts, LOW);

  duration1 = pulseIn(echoPinRechts, HIGH);
  
  // Calculate the distance
  distanceCm2 = duration2 * SOUND_SPEED/2;

  digitalWrite(trigPinBeneden, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinBeneden, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinBeneden, LOW);

  duration2 = pulseIn(echoPinbeneden, HIGH);
  
  // Calculate the distance
  distanceCm2 = duration2 * SOUND_SPEED/2;
  

  // If leftsensor is recognized go right
  if (digitalRead(irLinks)== LOW){
      rechts();
  }
  // If rightsensor is recognized go left
  else if (digitalRead(irRechts)== LOW){
      links();
  }
  // if left ultrason detects something go right
  else if (distanceCm < 56){
    achteruit();
    rechts();
  }
  // if right ulstrason detects something go left
  else if (distanceCm1 > 56){
    achteruit();
    links();
  }
  //if bottom ultrason detects something go back
  else if (distanceCm2 > 10)
  {
    achteruit();
  }
  // else go forward
  else{
      vooruit();
    }
    break;
    case wifi:
      // controls the motors
            if (header.indexOf("GET /26/voor") >= 0) {
              Serial.println("vooruit");
              vooruit();
            } else if (header.indexOf("GET /27/achter") >= 0) {
              Serial.println("achter");
              achteruit();
            } else if (header.indexOf("GET /28/links") >= 0) {
              Serial.println("links");
              links();
            } else if (header.indexOf("GET /29/rechts") >= 0) {
              Serial.println("rechts");
              rechts();
    }
  }
  }  
}
